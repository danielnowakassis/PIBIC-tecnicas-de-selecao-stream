package moa.classifiers.ensemble_selection;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import com.github.javacliparser.IntOption;
import com.yahoo.labs.samoa.instances.Instance;

import moa.classifiers.meta.OzaBag;
import moa.core.DoubleVector;

public class OzaBagd extends OzaBag {
	private static final long serialVersionUID = 1L;
	public int correctlyclassified;
	public float accuracy;
	public int decimal_accuracy;
	public int classification_threshold = 0;
	public int n_classifiers;
	public boolean activate;
	
	public ArrayList<ArrayList<Integer>> slidingWindowarray;
	public ArrayList<Float> density_control;
	public ArrayList<Integer> current_density;
	public ArrayList<Integer> density;
	public IntOption slidingWindowSizeOption = new IntOption("slidingWindowSize", 'z',
			"Size of the sliding window", 10, 1, Integer.MAX_VALUE);
	public IntOption density_control_size = new IntOption("density_control_size", 'รง',
			"Size of the sliding window", 100, 1, Integer.MAX_VALUE);
	FileWriter fWriter;
	public int cont = 0;
	
	@Override
    public double[] getVotesForInstance(Instance inst) {
		cont += 1;
		 //add ensemble array        	
		if (this.slidingWindowarray == null) {
			this.slidingWindowarray = new ArrayList<ArrayList<Integer>>();
		}
		if(this.density == null) {
			this.density = new ArrayList<>();
			this.current_density = new ArrayList<>();
			for (int k = 0; k < 11; k++) {
				this.density.add(0);
				this.current_density.add(0);
			}
		}
        if(this.density_control == null) {
        	this.density_control = new ArrayList<Float>();
        }
        
        DoubleVector combinedVote = new DoubleVector();
        for (int i = 0; i < this.ensemble.length; i++) {
        	//add ensemble array        	
    		if (this.slidingWindowarray.size() < this.ensemble.length) {
    			ArrayList<Integer> array = new ArrayList<Integer>();
    			this.slidingWindowarray.add(array);
    		}
    		if(i == 0) {
    			int most_recurrent = 0;
    			for(int r = 0; r < this.density.size(); ++r) {
    				this.current_density.set(r, this.density.get(r));
    				int current = this.density.get(r);
    				if(current >= most_recurrent) {
    					this.classification_threshold = r;
    					most_recurrent = current;
    				}
    			}
    		}
        	
        	
        	//learner accuracy
        	for(int j = 0; j < this.slidingWindowarray.get(i).size(); ++j) {
				correctlyclassified += this.slidingWindowarray.get(i).get(j);
			}
			accuracy = (float) correctlyclassified/ this.slidingWindowarray.get(i).size();		    
			correctlyclassified = 0;
			decimal_accuracy = (int) (10 * accuracy);
			
			//if(this.instancesSeen == 100) {
			//System.out.println(this.current_density);
			//System.out.println(this.density);
			//System.out.println(this.classification_threshold);}
            DoubleVector vote = new DoubleVector(this.ensemble[i].getVotesForInstance(inst));
            if (vote.sumOfValues() > 0.0) {
                vote.normalize();
                if(decimal_accuracy >= classification_threshold) {
                	combinedVote.addValues(vote);
                	n_classifiers += 1;}
            }
          //atualiza modelo janela deslizante
			boolean correctlyClassifies = this.ensemble[i].correctlyClassifies(inst);
			int b = correctlyClassifies? 1 : 0;
			this.slidingWindowarray.get(i).add(b); 
			if(this.slidingWindowarray.get(i).size() == this.slidingWindowSizeOption.getValue() + 1){	           	
				this.slidingWindowarray.get(i).remove(0);	
			}
			//atualiza modelo controle densidade
			//learner accuracy
			
        	for(int j = 0; j < this.slidingWindowarray.get(i).size(); ++j) {
				correctlyclassified += this.slidingWindowarray.get(i).get(j);
			}
			accuracy = (float) correctlyclassified/ this.slidingWindowarray.get(i).size();		    
			correctlyclassified = 0;
			decimal_accuracy = (int) (10 * accuracy);
			
			this.density_control.add(accuracy);
			int add_decimal = this.density.get(decimal_accuracy) + 1;
			this.density.set(decimal_accuracy, add_decimal);
			if(this.density_control.size() == this.density_control_size.getValue() + 1) {
				int index_decimal = (int) (10 * this.density_control.get(0));
				int remove_decimal = this.density.get(index_decimal) - 1;
				this.density.set(index_decimal, remove_decimal);
				this.density_control.remove(0);
			}
            
        }
        /*if(cont > 7000 && cont < 7500) {
            try {
    			fWriter = new FileWriter("C:/Users/daniel/Desktop/COMPARACAO DENSIDADE/OZA.txt", true);
    			BufferedWriter  bw = new BufferedWriter(fWriter);
    			PrintWriter pw = new PrintWriter(fWriter);
    			//String inst = String.valueOf(this.instancesSeen);
    			//pw.print(inst + ": ");
    			//pw.print("[ ");
    			if(this.current_density != null) {
    			for (int h = 0; h < this.current_density.size(); h++){
    				String text = String.valueOf(this.current_density.get(h));
    				pw.print(text);
    				pw.print("\n");
    			}}
    			//bw.newLine();
    			//pw.print(" ] ");
    			//pw.print(String.valueOf(classification_threshold) + " ");
    			//pw.print(String.valueOf(n_classifiers));
    			bw.close();
    			pw.close();
    		} catch (IOException e) {
    			e.printStackTrace();
    		}}*/
        n_classifiers = 0;
        return combinedVote.getArrayRef();
    }
}
